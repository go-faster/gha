// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s Job) Validate() error {
	switch s.Type {
	case JobNothingJob:
		return nil // no validation needed
	case JobDownloadJob:
		return nil // no validation needed
	case JobProcessJob:
		if err := s.JobProcess.Validate(); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s JobProcess) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Keys == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "keys",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s Progress) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Event.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "event",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    5,
			MinLengthSet: true,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Key)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "key",
			Error: err,
		})
	}
	if err := func() error {
		if s.SHA256Content.Set {
			if err := func() error {
				if err := (validate.String{
					MinLength:    64,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(s.SHA256Content.Value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sha256_content",
			Error: err,
		})
	}
	if err := func() error {
		if s.SHA256Input.Set {
			if err := func() error {
				if err := (validate.String{
					MinLength:    64,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(s.SHA256Input.Value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sha256_input",
			Error: err,
		})
	}
	if err := func() error {
		if s.SHA256Output.Set {
			if err := func() error {
				if err := (validate.String{
					MinLength:    64,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(s.SHA256Output.Value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sha256_output",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ProgressEvent) Validate() error {
	switch s {
	case "Ready":
		return nil
	case "Downloading":
		return nil
	case "Processed":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
