// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"fmt"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Error description.
// Ref: #/components/schemas/Error
type Error struct {
	Message string "json:\"message\""
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// Job to perform on worker.
// Ref: #/components/schemas/Job
// Job represents sum type.
type Job struct {
	Type        JobType // switch on this field
	JobNothing  JobNothing
	JobDownload JobDownload
	JobProcess  JobProcess
}

// JobType is oneOf type of Job.
type JobType string

// Possible values for JobType.
const (
	JobNothingJob  JobType = "JobNothing"
	JobDownloadJob JobType = "JobDownload"
	JobProcessJob  JobType = "JobProcess"
)

// IsJobNothing reports whether Job is JobNothing.
func (s Job) IsJobNothing() bool { return s.Type == JobNothingJob }

// IsJobDownload reports whether Job is JobDownload.
func (s Job) IsJobDownload() bool { return s.Type == JobDownloadJob }

// IsJobProcess reports whether Job is JobProcess.
func (s Job) IsJobProcess() bool { return s.Type == JobProcessJob }

// SetJobNothing sets Job to JobNothing.
func (s *Job) SetJobNothing(v JobNothing) {
	s.Type = JobNothingJob
	s.JobNothing = v
}

// GetJobNothing returns JobNothing and true boolean if Job is JobNothing.
func (s Job) GetJobNothing() (v JobNothing, ok bool) {
	if !s.IsJobNothing() {
		return v, false
	}
	return s.JobNothing, true
}

// NewJobNothingJob returns new Job from JobNothing.
func NewJobNothingJob(v JobNothing) Job {
	var s Job
	s.SetJobNothing(v)
	return s
}

// SetJobDownload sets Job to JobDownload.
func (s *Job) SetJobDownload(v JobDownload) {
	s.Type = JobDownloadJob
	s.JobDownload = v
}

// GetJobDownload returns JobDownload and true boolean if Job is JobDownload.
func (s Job) GetJobDownload() (v JobDownload, ok bool) {
	if !s.IsJobDownload() {
		return v, false
	}
	return s.JobDownload, true
}

// NewJobDownloadJob returns new Job from JobDownload.
func NewJobDownloadJob(v JobDownload) Job {
	var s Job
	s.SetJobDownload(v)
	return s
}

// SetJobProcess sets Job to JobProcess.
func (s *Job) SetJobProcess(v JobProcess) {
	s.Type = JobProcessJob
	s.JobProcess = v
}

// GetJobProcess returns JobProcess and true boolean if Job is JobProcess.
func (s Job) GetJobProcess() (v JobProcess, ok bool) {
	if !s.IsJobProcess() {
		return v, false
	}
	return s.JobProcess, true
}

// NewJobProcessJob returns new Job from JobProcess.
func NewJobProcessJob(v JobProcess) Job {
	var s Job
	s.SetJobProcess(v)
	return s
}

// Download chunk.
// Ref: #/components/schemas/JobDownload
type JobDownload struct {
	Date string "json:\"date\""
}

// Do nothing.
// Ref: #/components/schemas/JobNothing
type JobNothing struct{}

// Process job.
// Ref: #/components/schemas/JobProcess
type JobProcess struct {
	Clickhouse string   "json:\"clickhouse\""
	Keys       []string "json:\"keys\""
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Progress
type Progress struct {
	ContentSizeBytes OptInt64      "json:\"content_size_bytes\""
	Event            ProgressEvent "json:\"event\""
	InputReadyBytes  OptInt64      "json:\"input_ready_bytes\""
	InputSizeBytes   OptInt64      "json:\"input_size_bytes\""
	// Chunk key.
	Key             string    "json:\"key\""
	OutputSizeBytes OptInt64  "json:\"output_size_bytes\""
	SHA256Content   OptString "json:\"sha256_content\""
	SHA256Input     OptString "json:\"sha256_input\""
	SHA256Output    OptString "json:\"sha256_output\""
}

type ProgressEvent string

const (
	ProgressEventReady       ProgressEvent = "Ready"
	ProgressEventDownloading ProgressEvent = "Downloading"
	ProgressEventProcessed   ProgressEvent = "Processed"
)

// Ref: #/components/schemas/Status
type Status struct {
	Message string "json:\"message\""
}
