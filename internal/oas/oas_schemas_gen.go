// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
	_ = jx.Null
	_ = sync.Pool{}
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/Error
type Error struct {
	Message string `json:"message"`
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// Ref: #/components/schemas/Job
// Job represents sum type.
type Job struct {
	Type        JobType // switch on this field
	JobNothing  JobNothing
	JobDownload JobDownload
}

// JobType is oneOf type of Job.
type JobType string

// Possible values for JobType.
const (
	JobNothingJob  JobType = "JobNothing"
	JobDownloadJob JobType = "JobDownload"
)

// IsJobNothing reports whether Job is JobNothing.
func (s Job) IsJobNothing() bool { return s.Type == JobNothingJob }

// IsJobDownload reports whether Job is JobDownload.
func (s Job) IsJobDownload() bool { return s.Type == JobDownloadJob }

// SetJobNothing sets Job to JobNothing.
func (s *Job) SetJobNothing(v JobNothing) {
	s.Type = JobNothingJob
	s.JobNothing = v
}

// GetJobNothing returns JobNothing and true boolean if Job is JobNothing.
func (s Job) GetJobNothing() (v JobNothing, ok bool) {
	if !s.IsJobNothing() {
		return v, false
	}
	return s.JobNothing, true
}

// NewJobNothingJob returns new Job from JobNothing.
func NewJobNothingJob(v JobNothing) Job {
	var s Job
	s.SetJobNothing(v)
	return s
}

// SetJobDownload sets Job to JobDownload.
func (s *Job) SetJobDownload(v JobDownload) {
	s.Type = JobDownloadJob
	s.JobDownload = v
}

// GetJobDownload returns JobDownload and true boolean if Job is JobDownload.
func (s Job) GetJobDownload() (v JobDownload, ok bool) {
	if !s.IsJobDownload() {
		return v, false
	}
	return s.JobDownload, true
}

// NewJobDownloadJob returns new Job from JobDownload.
func NewJobDownloadJob(v JobDownload) Job {
	var s Job
	s.SetJobDownload(v)
	return s
}

// Ref: #/components/schemas/JobDownload
type JobDownload struct {
	Type string `json:"type"`
	Date string `json:"date"`
}

// Ref: #/components/schemas/JobNothing
type JobNothing struct {
	Type string `json:"type"`
}

// Ref: #/components/schemas/Status
type Status struct {
	Message string `json:"message"`
}
