// Code generated by ent, DO NOT EDIT.

package chunk

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the chunk type in the database.
	Label = "chunk"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldStart holds the string denoting the start field in the database.
	FieldStart = "start"
	// FieldLeaseExpiresAt holds the string denoting the lease_expires_at field in the database.
	FieldLeaseExpiresAt = "lease_expires_at"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldSizeInput holds the string denoting the size_input field in the database.
	FieldSizeInput = "size_input"
	// FieldSizeContent holds the string denoting the size_content field in the database.
	FieldSizeContent = "size_content"
	// FieldSizeOutput holds the string denoting the size_output field in the database.
	FieldSizeOutput = "size_output"
	// FieldSha256Input holds the string denoting the sha256_input field in the database.
	FieldSha256Input = "sha256_input"
	// FieldSha256Content holds the string denoting the sha256_content field in the database.
	FieldSha256Content = "sha256_content"
	// FieldSha256Output holds the string denoting the sha256_output field in the database.
	FieldSha256Output = "sha256_output"
	// EdgeWorker holds the string denoting the worker edge name in mutations.
	EdgeWorker = "worker"
	// Table holds the table name of the chunk in the database.
	Table = "chunks"
	// WorkerTable is the table that holds the worker relation/edge.
	WorkerTable = "chunks"
	// WorkerInverseTable is the table name for the Worker entity.
	// It exists in this package in order to avoid circular dependency with the "worker" package.
	WorkerInverseTable = "workers"
	// WorkerColumn is the table column denoting the worker relation/edge.
	WorkerColumn = "worker_chunks"
)

// Columns holds all SQL columns for chunk fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldStart,
	FieldLeaseExpiresAt,
	FieldState,
	FieldSizeInput,
	FieldSizeContent,
	FieldSizeOutput,
	FieldSha256Input,
	FieldSha256Content,
	FieldSha256Output,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "chunks"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"worker_chunks",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// State defines the type for the "state" enum field.
type State string

// StateNew is the default value of the State enum.
const DefaultState = StateNew

// State values.
const (
	StateNew         State = "New"
	StateDownloading State = "Downloading"
	StateReady       State = "Ready"
	StateProcessing  State = "Processing"
	StateDone        State = "Done"
	StateNotFound    State = "NotFound"
)

func (s State) String() string {
	return string(s)
}

// StateValidator is a validator for the "state" field enum values. It is called by the builders before save.
func StateValidator(s State) error {
	switch s {
	case StateNew, StateDownloading, StateReady, StateProcessing, StateDone, StateNotFound:
		return nil
	default:
		return fmt.Errorf("chunk: invalid enum value for state field: %q", s)
	}
}

// OrderOption defines the ordering options for the Chunk queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByStart orders the results by the start field.
func ByStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStart, opts...).ToFunc()
}

// ByLeaseExpiresAt orders the results by the lease_expires_at field.
func ByLeaseExpiresAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLeaseExpiresAt, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// BySizeInput orders the results by the size_input field.
func BySizeInput(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSizeInput, opts...).ToFunc()
}

// BySizeContent orders the results by the size_content field.
func BySizeContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSizeContent, opts...).ToFunc()
}

// BySizeOutput orders the results by the size_output field.
func BySizeOutput(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSizeOutput, opts...).ToFunc()
}

// BySha256Input orders the results by the sha256_input field.
func BySha256Input(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSha256Input, opts...).ToFunc()
}

// BySha256Content orders the results by the sha256_content field.
func BySha256Content(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSha256Content, opts...).ToFunc()
}

// BySha256Output orders the results by the sha256_output field.
func BySha256Output(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSha256Output, opts...).ToFunc()
}

// ByWorkerField orders the results by worker field.
func ByWorkerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkerStep(), sql.OrderByField(field, opts...))
	}
}
func newWorkerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, WorkerTable, WorkerColumn),
	)
}
