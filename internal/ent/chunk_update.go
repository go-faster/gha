// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-faster/gha/internal/ent/chunk"
	"github.com/go-faster/gha/internal/ent/predicate"
	"github.com/go-faster/gha/internal/ent/worker"
	"github.com/google/uuid"
)

// ChunkUpdate is the builder for updating Chunk entities.
type ChunkUpdate struct {
	config
	hooks    []Hook
	mutation *ChunkMutation
}

// Where appends a list predicates to the ChunkUpdate builder.
func (cu *ChunkUpdate) Where(ps ...predicate.Chunk) *ChunkUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *ChunkUpdate) SetUpdatedAt(t time.Time) *ChunkUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetStart sets the "start" field.
func (cu *ChunkUpdate) SetStart(t time.Time) *ChunkUpdate {
	cu.mutation.SetStart(t)
	return cu
}

// SetLeaseExpiresAt sets the "lease_expires_at" field.
func (cu *ChunkUpdate) SetLeaseExpiresAt(t time.Time) *ChunkUpdate {
	cu.mutation.SetLeaseExpiresAt(t)
	return cu
}

// SetNillableLeaseExpiresAt sets the "lease_expires_at" field if the given value is not nil.
func (cu *ChunkUpdate) SetNillableLeaseExpiresAt(t *time.Time) *ChunkUpdate {
	if t != nil {
		cu.SetLeaseExpiresAt(*t)
	}
	return cu
}

// ClearLeaseExpiresAt clears the value of the "lease_expires_at" field.
func (cu *ChunkUpdate) ClearLeaseExpiresAt() *ChunkUpdate {
	cu.mutation.ClearLeaseExpiresAt()
	return cu
}

// SetState sets the "state" field.
func (cu *ChunkUpdate) SetState(c chunk.State) *ChunkUpdate {
	cu.mutation.SetState(c)
	return cu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (cu *ChunkUpdate) SetNillableState(c *chunk.State) *ChunkUpdate {
	if c != nil {
		cu.SetState(*c)
	}
	return cu
}

// SetSizeInput sets the "size_input" field.
func (cu *ChunkUpdate) SetSizeInput(i int64) *ChunkUpdate {
	cu.mutation.ResetSizeInput()
	cu.mutation.SetSizeInput(i)
	return cu
}

// SetNillableSizeInput sets the "size_input" field if the given value is not nil.
func (cu *ChunkUpdate) SetNillableSizeInput(i *int64) *ChunkUpdate {
	if i != nil {
		cu.SetSizeInput(*i)
	}
	return cu
}

// AddSizeInput adds i to the "size_input" field.
func (cu *ChunkUpdate) AddSizeInput(i int64) *ChunkUpdate {
	cu.mutation.AddSizeInput(i)
	return cu
}

// ClearSizeInput clears the value of the "size_input" field.
func (cu *ChunkUpdate) ClearSizeInput() *ChunkUpdate {
	cu.mutation.ClearSizeInput()
	return cu
}

// SetSizeContent sets the "size_content" field.
func (cu *ChunkUpdate) SetSizeContent(i int64) *ChunkUpdate {
	cu.mutation.ResetSizeContent()
	cu.mutation.SetSizeContent(i)
	return cu
}

// SetNillableSizeContent sets the "size_content" field if the given value is not nil.
func (cu *ChunkUpdate) SetNillableSizeContent(i *int64) *ChunkUpdate {
	if i != nil {
		cu.SetSizeContent(*i)
	}
	return cu
}

// AddSizeContent adds i to the "size_content" field.
func (cu *ChunkUpdate) AddSizeContent(i int64) *ChunkUpdate {
	cu.mutation.AddSizeContent(i)
	return cu
}

// ClearSizeContent clears the value of the "size_content" field.
func (cu *ChunkUpdate) ClearSizeContent() *ChunkUpdate {
	cu.mutation.ClearSizeContent()
	return cu
}

// SetSizeOutput sets the "size_output" field.
func (cu *ChunkUpdate) SetSizeOutput(i int64) *ChunkUpdate {
	cu.mutation.ResetSizeOutput()
	cu.mutation.SetSizeOutput(i)
	return cu
}

// SetNillableSizeOutput sets the "size_output" field if the given value is not nil.
func (cu *ChunkUpdate) SetNillableSizeOutput(i *int64) *ChunkUpdate {
	if i != nil {
		cu.SetSizeOutput(*i)
	}
	return cu
}

// AddSizeOutput adds i to the "size_output" field.
func (cu *ChunkUpdate) AddSizeOutput(i int64) *ChunkUpdate {
	cu.mutation.AddSizeOutput(i)
	return cu
}

// ClearSizeOutput clears the value of the "size_output" field.
func (cu *ChunkUpdate) ClearSizeOutput() *ChunkUpdate {
	cu.mutation.ClearSizeOutput()
	return cu
}

// SetSha256Input sets the "sha256_input" field.
func (cu *ChunkUpdate) SetSha256Input(s string) *ChunkUpdate {
	cu.mutation.SetSha256Input(s)
	return cu
}

// SetNillableSha256Input sets the "sha256_input" field if the given value is not nil.
func (cu *ChunkUpdate) SetNillableSha256Input(s *string) *ChunkUpdate {
	if s != nil {
		cu.SetSha256Input(*s)
	}
	return cu
}

// ClearSha256Input clears the value of the "sha256_input" field.
func (cu *ChunkUpdate) ClearSha256Input() *ChunkUpdate {
	cu.mutation.ClearSha256Input()
	return cu
}

// SetSha256Content sets the "sha256_content" field.
func (cu *ChunkUpdate) SetSha256Content(s string) *ChunkUpdate {
	cu.mutation.SetSha256Content(s)
	return cu
}

// SetNillableSha256Content sets the "sha256_content" field if the given value is not nil.
func (cu *ChunkUpdate) SetNillableSha256Content(s *string) *ChunkUpdate {
	if s != nil {
		cu.SetSha256Content(*s)
	}
	return cu
}

// ClearSha256Content clears the value of the "sha256_content" field.
func (cu *ChunkUpdate) ClearSha256Content() *ChunkUpdate {
	cu.mutation.ClearSha256Content()
	return cu
}

// SetSha256Output sets the "sha256_output" field.
func (cu *ChunkUpdate) SetSha256Output(s string) *ChunkUpdate {
	cu.mutation.SetSha256Output(s)
	return cu
}

// SetNillableSha256Output sets the "sha256_output" field if the given value is not nil.
func (cu *ChunkUpdate) SetNillableSha256Output(s *string) *ChunkUpdate {
	if s != nil {
		cu.SetSha256Output(*s)
	}
	return cu
}

// ClearSha256Output clears the value of the "sha256_output" field.
func (cu *ChunkUpdate) ClearSha256Output() *ChunkUpdate {
	cu.mutation.ClearSha256Output()
	return cu
}

// SetWorkerID sets the "worker" edge to the Worker entity by ID.
func (cu *ChunkUpdate) SetWorkerID(id uuid.UUID) *ChunkUpdate {
	cu.mutation.SetWorkerID(id)
	return cu
}

// SetNillableWorkerID sets the "worker" edge to the Worker entity by ID if the given value is not nil.
func (cu *ChunkUpdate) SetNillableWorkerID(id *uuid.UUID) *ChunkUpdate {
	if id != nil {
		cu = cu.SetWorkerID(*id)
	}
	return cu
}

// SetWorker sets the "worker" edge to the Worker entity.
func (cu *ChunkUpdate) SetWorker(w *Worker) *ChunkUpdate {
	return cu.SetWorkerID(w.ID)
}

// Mutation returns the ChunkMutation object of the builder.
func (cu *ChunkUpdate) Mutation() *ChunkMutation {
	return cu.mutation
}

// ClearWorker clears the "worker" edge to the Worker entity.
func (cu *ChunkUpdate) ClearWorker() *ChunkUpdate {
	cu.mutation.ClearWorker()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ChunkUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cu.defaults()
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChunkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ChunkUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ChunkUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ChunkUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ChunkUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := chunk.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ChunkUpdate) check() error {
	if v, ok := cu.mutation.State(); ok {
		if err := chunk.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Chunk.state": %w`, err)}
		}
	}
	return nil
}

func (cu *ChunkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   chunk.Table,
			Columns: chunk.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: chunk.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: chunk.FieldUpdatedAt,
		})
	}
	if value, ok := cu.mutation.Start(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: chunk.FieldStart,
		})
	}
	if value, ok := cu.mutation.LeaseExpiresAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: chunk.FieldLeaseExpiresAt,
		})
	}
	if cu.mutation.LeaseExpiresAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: chunk.FieldLeaseExpiresAt,
		})
	}
	if value, ok := cu.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: chunk.FieldState,
		})
	}
	if value, ok := cu.mutation.SizeInput(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: chunk.FieldSizeInput,
		})
	}
	if value, ok := cu.mutation.AddedSizeInput(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: chunk.FieldSizeInput,
		})
	}
	if cu.mutation.SizeInputCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: chunk.FieldSizeInput,
		})
	}
	if value, ok := cu.mutation.SizeContent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: chunk.FieldSizeContent,
		})
	}
	if value, ok := cu.mutation.AddedSizeContent(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: chunk.FieldSizeContent,
		})
	}
	if cu.mutation.SizeContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: chunk.FieldSizeContent,
		})
	}
	if value, ok := cu.mutation.SizeOutput(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: chunk.FieldSizeOutput,
		})
	}
	if value, ok := cu.mutation.AddedSizeOutput(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: chunk.FieldSizeOutput,
		})
	}
	if cu.mutation.SizeOutputCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: chunk.FieldSizeOutput,
		})
	}
	if value, ok := cu.mutation.Sha256Input(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chunk.FieldSha256Input,
		})
	}
	if cu.mutation.Sha256InputCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: chunk.FieldSha256Input,
		})
	}
	if value, ok := cu.mutation.Sha256Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chunk.FieldSha256Content,
		})
	}
	if cu.mutation.Sha256ContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: chunk.FieldSha256Content,
		})
	}
	if value, ok := cu.mutation.Sha256Output(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chunk.FieldSha256Output,
		})
	}
	if cu.mutation.Sha256OutputCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: chunk.FieldSha256Output,
		})
	}
	if cu.mutation.WorkerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chunk.WorkerTable,
			Columns: []string{chunk.WorkerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: worker.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.WorkerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chunk.WorkerTable,
			Columns: []string{chunk.WorkerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: worker.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chunk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ChunkUpdateOne is the builder for updating a single Chunk entity.
type ChunkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChunkMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *ChunkUpdateOne) SetUpdatedAt(t time.Time) *ChunkUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetStart sets the "start" field.
func (cuo *ChunkUpdateOne) SetStart(t time.Time) *ChunkUpdateOne {
	cuo.mutation.SetStart(t)
	return cuo
}

// SetLeaseExpiresAt sets the "lease_expires_at" field.
func (cuo *ChunkUpdateOne) SetLeaseExpiresAt(t time.Time) *ChunkUpdateOne {
	cuo.mutation.SetLeaseExpiresAt(t)
	return cuo
}

// SetNillableLeaseExpiresAt sets the "lease_expires_at" field if the given value is not nil.
func (cuo *ChunkUpdateOne) SetNillableLeaseExpiresAt(t *time.Time) *ChunkUpdateOne {
	if t != nil {
		cuo.SetLeaseExpiresAt(*t)
	}
	return cuo
}

// ClearLeaseExpiresAt clears the value of the "lease_expires_at" field.
func (cuo *ChunkUpdateOne) ClearLeaseExpiresAt() *ChunkUpdateOne {
	cuo.mutation.ClearLeaseExpiresAt()
	return cuo
}

// SetState sets the "state" field.
func (cuo *ChunkUpdateOne) SetState(c chunk.State) *ChunkUpdateOne {
	cuo.mutation.SetState(c)
	return cuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (cuo *ChunkUpdateOne) SetNillableState(c *chunk.State) *ChunkUpdateOne {
	if c != nil {
		cuo.SetState(*c)
	}
	return cuo
}

// SetSizeInput sets the "size_input" field.
func (cuo *ChunkUpdateOne) SetSizeInput(i int64) *ChunkUpdateOne {
	cuo.mutation.ResetSizeInput()
	cuo.mutation.SetSizeInput(i)
	return cuo
}

// SetNillableSizeInput sets the "size_input" field if the given value is not nil.
func (cuo *ChunkUpdateOne) SetNillableSizeInput(i *int64) *ChunkUpdateOne {
	if i != nil {
		cuo.SetSizeInput(*i)
	}
	return cuo
}

// AddSizeInput adds i to the "size_input" field.
func (cuo *ChunkUpdateOne) AddSizeInput(i int64) *ChunkUpdateOne {
	cuo.mutation.AddSizeInput(i)
	return cuo
}

// ClearSizeInput clears the value of the "size_input" field.
func (cuo *ChunkUpdateOne) ClearSizeInput() *ChunkUpdateOne {
	cuo.mutation.ClearSizeInput()
	return cuo
}

// SetSizeContent sets the "size_content" field.
func (cuo *ChunkUpdateOne) SetSizeContent(i int64) *ChunkUpdateOne {
	cuo.mutation.ResetSizeContent()
	cuo.mutation.SetSizeContent(i)
	return cuo
}

// SetNillableSizeContent sets the "size_content" field if the given value is not nil.
func (cuo *ChunkUpdateOne) SetNillableSizeContent(i *int64) *ChunkUpdateOne {
	if i != nil {
		cuo.SetSizeContent(*i)
	}
	return cuo
}

// AddSizeContent adds i to the "size_content" field.
func (cuo *ChunkUpdateOne) AddSizeContent(i int64) *ChunkUpdateOne {
	cuo.mutation.AddSizeContent(i)
	return cuo
}

// ClearSizeContent clears the value of the "size_content" field.
func (cuo *ChunkUpdateOne) ClearSizeContent() *ChunkUpdateOne {
	cuo.mutation.ClearSizeContent()
	return cuo
}

// SetSizeOutput sets the "size_output" field.
func (cuo *ChunkUpdateOne) SetSizeOutput(i int64) *ChunkUpdateOne {
	cuo.mutation.ResetSizeOutput()
	cuo.mutation.SetSizeOutput(i)
	return cuo
}

// SetNillableSizeOutput sets the "size_output" field if the given value is not nil.
func (cuo *ChunkUpdateOne) SetNillableSizeOutput(i *int64) *ChunkUpdateOne {
	if i != nil {
		cuo.SetSizeOutput(*i)
	}
	return cuo
}

// AddSizeOutput adds i to the "size_output" field.
func (cuo *ChunkUpdateOne) AddSizeOutput(i int64) *ChunkUpdateOne {
	cuo.mutation.AddSizeOutput(i)
	return cuo
}

// ClearSizeOutput clears the value of the "size_output" field.
func (cuo *ChunkUpdateOne) ClearSizeOutput() *ChunkUpdateOne {
	cuo.mutation.ClearSizeOutput()
	return cuo
}

// SetSha256Input sets the "sha256_input" field.
func (cuo *ChunkUpdateOne) SetSha256Input(s string) *ChunkUpdateOne {
	cuo.mutation.SetSha256Input(s)
	return cuo
}

// SetNillableSha256Input sets the "sha256_input" field if the given value is not nil.
func (cuo *ChunkUpdateOne) SetNillableSha256Input(s *string) *ChunkUpdateOne {
	if s != nil {
		cuo.SetSha256Input(*s)
	}
	return cuo
}

// ClearSha256Input clears the value of the "sha256_input" field.
func (cuo *ChunkUpdateOne) ClearSha256Input() *ChunkUpdateOne {
	cuo.mutation.ClearSha256Input()
	return cuo
}

// SetSha256Content sets the "sha256_content" field.
func (cuo *ChunkUpdateOne) SetSha256Content(s string) *ChunkUpdateOne {
	cuo.mutation.SetSha256Content(s)
	return cuo
}

// SetNillableSha256Content sets the "sha256_content" field if the given value is not nil.
func (cuo *ChunkUpdateOne) SetNillableSha256Content(s *string) *ChunkUpdateOne {
	if s != nil {
		cuo.SetSha256Content(*s)
	}
	return cuo
}

// ClearSha256Content clears the value of the "sha256_content" field.
func (cuo *ChunkUpdateOne) ClearSha256Content() *ChunkUpdateOne {
	cuo.mutation.ClearSha256Content()
	return cuo
}

// SetSha256Output sets the "sha256_output" field.
func (cuo *ChunkUpdateOne) SetSha256Output(s string) *ChunkUpdateOne {
	cuo.mutation.SetSha256Output(s)
	return cuo
}

// SetNillableSha256Output sets the "sha256_output" field if the given value is not nil.
func (cuo *ChunkUpdateOne) SetNillableSha256Output(s *string) *ChunkUpdateOne {
	if s != nil {
		cuo.SetSha256Output(*s)
	}
	return cuo
}

// ClearSha256Output clears the value of the "sha256_output" field.
func (cuo *ChunkUpdateOne) ClearSha256Output() *ChunkUpdateOne {
	cuo.mutation.ClearSha256Output()
	return cuo
}

// SetWorkerID sets the "worker" edge to the Worker entity by ID.
func (cuo *ChunkUpdateOne) SetWorkerID(id uuid.UUID) *ChunkUpdateOne {
	cuo.mutation.SetWorkerID(id)
	return cuo
}

// SetNillableWorkerID sets the "worker" edge to the Worker entity by ID if the given value is not nil.
func (cuo *ChunkUpdateOne) SetNillableWorkerID(id *uuid.UUID) *ChunkUpdateOne {
	if id != nil {
		cuo = cuo.SetWorkerID(*id)
	}
	return cuo
}

// SetWorker sets the "worker" edge to the Worker entity.
func (cuo *ChunkUpdateOne) SetWorker(w *Worker) *ChunkUpdateOne {
	return cuo.SetWorkerID(w.ID)
}

// Mutation returns the ChunkMutation object of the builder.
func (cuo *ChunkUpdateOne) Mutation() *ChunkMutation {
	return cuo.mutation
}

// ClearWorker clears the "worker" edge to the Worker entity.
func (cuo *ChunkUpdateOne) ClearWorker() *ChunkUpdateOne {
	cuo.mutation.ClearWorker()
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ChunkUpdateOne) Select(field string, fields ...string) *ChunkUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Chunk entity.
func (cuo *ChunkUpdateOne) Save(ctx context.Context) (*Chunk, error) {
	var (
		err  error
		node *Chunk
	)
	cuo.defaults()
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChunkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Chunk)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ChunkMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ChunkUpdateOne) SaveX(ctx context.Context) *Chunk {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ChunkUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ChunkUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ChunkUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := chunk.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ChunkUpdateOne) check() error {
	if v, ok := cuo.mutation.State(); ok {
		if err := chunk.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Chunk.state": %w`, err)}
		}
	}
	return nil
}

func (cuo *ChunkUpdateOne) sqlSave(ctx context.Context) (_node *Chunk, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   chunk.Table,
			Columns: chunk.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: chunk.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Chunk.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chunk.FieldID)
		for _, f := range fields {
			if !chunk.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != chunk.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: chunk.FieldUpdatedAt,
		})
	}
	if value, ok := cuo.mutation.Start(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: chunk.FieldStart,
		})
	}
	if value, ok := cuo.mutation.LeaseExpiresAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: chunk.FieldLeaseExpiresAt,
		})
	}
	if cuo.mutation.LeaseExpiresAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: chunk.FieldLeaseExpiresAt,
		})
	}
	if value, ok := cuo.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: chunk.FieldState,
		})
	}
	if value, ok := cuo.mutation.SizeInput(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: chunk.FieldSizeInput,
		})
	}
	if value, ok := cuo.mutation.AddedSizeInput(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: chunk.FieldSizeInput,
		})
	}
	if cuo.mutation.SizeInputCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: chunk.FieldSizeInput,
		})
	}
	if value, ok := cuo.mutation.SizeContent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: chunk.FieldSizeContent,
		})
	}
	if value, ok := cuo.mutation.AddedSizeContent(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: chunk.FieldSizeContent,
		})
	}
	if cuo.mutation.SizeContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: chunk.FieldSizeContent,
		})
	}
	if value, ok := cuo.mutation.SizeOutput(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: chunk.FieldSizeOutput,
		})
	}
	if value, ok := cuo.mutation.AddedSizeOutput(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: chunk.FieldSizeOutput,
		})
	}
	if cuo.mutation.SizeOutputCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: chunk.FieldSizeOutput,
		})
	}
	if value, ok := cuo.mutation.Sha256Input(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chunk.FieldSha256Input,
		})
	}
	if cuo.mutation.Sha256InputCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: chunk.FieldSha256Input,
		})
	}
	if value, ok := cuo.mutation.Sha256Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chunk.FieldSha256Content,
		})
	}
	if cuo.mutation.Sha256ContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: chunk.FieldSha256Content,
		})
	}
	if value, ok := cuo.mutation.Sha256Output(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chunk.FieldSha256Output,
		})
	}
	if cuo.mutation.Sha256OutputCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: chunk.FieldSha256Output,
		})
	}
	if cuo.mutation.WorkerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chunk.WorkerTable,
			Columns: []string{chunk.WorkerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: worker.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.WorkerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chunk.WorkerTable,
			Columns: []string{chunk.WorkerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: worker.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Chunk{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chunk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
