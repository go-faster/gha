// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/go-faster/gha/internal/ent/chunk"
)

// Chunk is the model entity for the Chunk schema.
type Chunk struct {
	config `json:"-"`
	// ID of the ent.
	// Like 2006-01-02T15
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	// Time when entity was created.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	// Time when entity was updated.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Start holds the value of the "start" field.
	// Minimum possible time of entry in chunk
	Start time.Time `json:"start,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Chunk) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case chunk.FieldID:
			values[i] = new(sql.NullString)
		case chunk.FieldCreatedAt, chunk.FieldUpdatedAt, chunk.FieldStart:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Chunk", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Chunk fields.
func (c *Chunk) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chunk.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				c.ID = value.String
			}
		case chunk.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case chunk.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case chunk.FieldStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start", values[i])
			} else if value.Valid {
				c.Start = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Chunk.
// Note that you need to call Chunk.Unwrap() before calling this method if this Chunk
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Chunk) Update() *ChunkUpdateOne {
	return (&ChunkClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Chunk entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Chunk) Unwrap() *Chunk {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Chunk is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Chunk) String() string {
	var builder strings.Builder
	builder.WriteString("Chunk(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", start=")
	builder.WriteString(c.Start.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Chunks is a parsable slice of Chunk.
type Chunks []*Chunk

func (c Chunks) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
