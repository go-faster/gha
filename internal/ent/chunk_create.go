// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-faster/gha/internal/ent/chunk"
	"github.com/go-faster/gha/internal/ent/worker"
	"github.com/google/uuid"
)

// ChunkCreate is the builder for creating a Chunk entity.
type ChunkCreate struct {
	config
	mutation *ChunkMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cc *ChunkCreate) SetCreatedAt(t time.Time) *ChunkCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *ChunkCreate) SetNillableCreatedAt(t *time.Time) *ChunkCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *ChunkCreate) SetUpdatedAt(t time.Time) *ChunkCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *ChunkCreate) SetNillableUpdatedAt(t *time.Time) *ChunkCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetStart sets the "start" field.
func (cc *ChunkCreate) SetStart(t time.Time) *ChunkCreate {
	cc.mutation.SetStart(t)
	return cc
}

// SetLeaseExpiresAt sets the "lease_expires_at" field.
func (cc *ChunkCreate) SetLeaseExpiresAt(t time.Time) *ChunkCreate {
	cc.mutation.SetLeaseExpiresAt(t)
	return cc
}

// SetNillableLeaseExpiresAt sets the "lease_expires_at" field if the given value is not nil.
func (cc *ChunkCreate) SetNillableLeaseExpiresAt(t *time.Time) *ChunkCreate {
	if t != nil {
		cc.SetLeaseExpiresAt(*t)
	}
	return cc
}

// SetState sets the "state" field.
func (cc *ChunkCreate) SetState(c chunk.State) *ChunkCreate {
	cc.mutation.SetState(c)
	return cc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (cc *ChunkCreate) SetNillableState(c *chunk.State) *ChunkCreate {
	if c != nil {
		cc.SetState(*c)
	}
	return cc
}

// SetSizeInput sets the "size_input" field.
func (cc *ChunkCreate) SetSizeInput(i int64) *ChunkCreate {
	cc.mutation.SetSizeInput(i)
	return cc
}

// SetNillableSizeInput sets the "size_input" field if the given value is not nil.
func (cc *ChunkCreate) SetNillableSizeInput(i *int64) *ChunkCreate {
	if i != nil {
		cc.SetSizeInput(*i)
	}
	return cc
}

// SetSizeContent sets the "size_content" field.
func (cc *ChunkCreate) SetSizeContent(i int64) *ChunkCreate {
	cc.mutation.SetSizeContent(i)
	return cc
}

// SetNillableSizeContent sets the "size_content" field if the given value is not nil.
func (cc *ChunkCreate) SetNillableSizeContent(i *int64) *ChunkCreate {
	if i != nil {
		cc.SetSizeContent(*i)
	}
	return cc
}

// SetSizeOutput sets the "size_output" field.
func (cc *ChunkCreate) SetSizeOutput(i int64) *ChunkCreate {
	cc.mutation.SetSizeOutput(i)
	return cc
}

// SetNillableSizeOutput sets the "size_output" field if the given value is not nil.
func (cc *ChunkCreate) SetNillableSizeOutput(i *int64) *ChunkCreate {
	if i != nil {
		cc.SetSizeOutput(*i)
	}
	return cc
}

// SetSha256Input sets the "sha256_input" field.
func (cc *ChunkCreate) SetSha256Input(s string) *ChunkCreate {
	cc.mutation.SetSha256Input(s)
	return cc
}

// SetNillableSha256Input sets the "sha256_input" field if the given value is not nil.
func (cc *ChunkCreate) SetNillableSha256Input(s *string) *ChunkCreate {
	if s != nil {
		cc.SetSha256Input(*s)
	}
	return cc
}

// SetSha256Content sets the "sha256_content" field.
func (cc *ChunkCreate) SetSha256Content(s string) *ChunkCreate {
	cc.mutation.SetSha256Content(s)
	return cc
}

// SetNillableSha256Content sets the "sha256_content" field if the given value is not nil.
func (cc *ChunkCreate) SetNillableSha256Content(s *string) *ChunkCreate {
	if s != nil {
		cc.SetSha256Content(*s)
	}
	return cc
}

// SetSha256Output sets the "sha256_output" field.
func (cc *ChunkCreate) SetSha256Output(s string) *ChunkCreate {
	cc.mutation.SetSha256Output(s)
	return cc
}

// SetNillableSha256Output sets the "sha256_output" field if the given value is not nil.
func (cc *ChunkCreate) SetNillableSha256Output(s *string) *ChunkCreate {
	if s != nil {
		cc.SetSha256Output(*s)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *ChunkCreate) SetID(s string) *ChunkCreate {
	cc.mutation.SetID(s)
	return cc
}

// SetWorkerID sets the "worker" edge to the Worker entity by ID.
func (cc *ChunkCreate) SetWorkerID(id uuid.UUID) *ChunkCreate {
	cc.mutation.SetWorkerID(id)
	return cc
}

// SetNillableWorkerID sets the "worker" edge to the Worker entity by ID if the given value is not nil.
func (cc *ChunkCreate) SetNillableWorkerID(id *uuid.UUID) *ChunkCreate {
	if id != nil {
		cc = cc.SetWorkerID(*id)
	}
	return cc
}

// SetWorker sets the "worker" edge to the Worker entity.
func (cc *ChunkCreate) SetWorker(w *Worker) *ChunkCreate {
	return cc.SetWorkerID(w.ID)
}

// Mutation returns the ChunkMutation object of the builder.
func (cc *ChunkCreate) Mutation() *ChunkMutation {
	return cc.mutation
}

// Save creates the Chunk in the database.
func (cc *ChunkCreate) Save(ctx context.Context) (*Chunk, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ChunkCreate) SaveX(ctx context.Context) *Chunk {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ChunkCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ChunkCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ChunkCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := chunk.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := chunk.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.State(); !ok {
		v := chunk.DefaultState
		cc.mutation.SetState(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ChunkCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Chunk.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Chunk.updated_at"`)}
	}
	if _, ok := cc.mutation.Start(); !ok {
		return &ValidationError{Name: "start", err: errors.New(`ent: missing required field "Chunk.start"`)}
	}
	if _, ok := cc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "Chunk.state"`)}
	}
	if v, ok := cc.mutation.State(); ok {
		if err := chunk.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Chunk.state": %w`, err)}
		}
	}
	return nil
}

func (cc *ChunkCreate) sqlSave(ctx context.Context) (*Chunk, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Chunk.ID type: %T", _spec.ID.Value)
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ChunkCreate) createSpec() (*Chunk, *sqlgraph.CreateSpec) {
	var (
		_node = &Chunk{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(chunk.Table, sqlgraph.NewFieldSpec(chunk.FieldID, field.TypeString))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(chunk.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(chunk.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.Start(); ok {
		_spec.SetField(chunk.FieldStart, field.TypeTime, value)
		_node.Start = value
	}
	if value, ok := cc.mutation.LeaseExpiresAt(); ok {
		_spec.SetField(chunk.FieldLeaseExpiresAt, field.TypeTime, value)
		_node.LeaseExpiresAt = value
	}
	if value, ok := cc.mutation.State(); ok {
		_spec.SetField(chunk.FieldState, field.TypeEnum, value)
		_node.State = value
	}
	if value, ok := cc.mutation.SizeInput(); ok {
		_spec.SetField(chunk.FieldSizeInput, field.TypeInt64, value)
		_node.SizeInput = value
	}
	if value, ok := cc.mutation.SizeContent(); ok {
		_spec.SetField(chunk.FieldSizeContent, field.TypeInt64, value)
		_node.SizeContent = value
	}
	if value, ok := cc.mutation.SizeOutput(); ok {
		_spec.SetField(chunk.FieldSizeOutput, field.TypeInt64, value)
		_node.SizeOutput = value
	}
	if value, ok := cc.mutation.Sha256Input(); ok {
		_spec.SetField(chunk.FieldSha256Input, field.TypeString, value)
		_node.Sha256Input = &value
	}
	if value, ok := cc.mutation.Sha256Content(); ok {
		_spec.SetField(chunk.FieldSha256Content, field.TypeString, value)
		_node.Sha256Content = &value
	}
	if value, ok := cc.mutation.Sha256Output(); ok {
		_spec.SetField(chunk.FieldSha256Output, field.TypeString, value)
		_node.Sha256Output = &value
	}
	if nodes := cc.mutation.WorkerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chunk.WorkerTable,
			Columns: []string{chunk.WorkerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(worker.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.worker_chunks = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Chunk.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChunkUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cc *ChunkCreate) OnConflict(opts ...sql.ConflictOption) *ChunkUpsertOne {
	cc.conflict = opts
	return &ChunkUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Chunk.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *ChunkCreate) OnConflictColumns(columns ...string) *ChunkUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &ChunkUpsertOne{
		create: cc,
	}
}

type (
	// ChunkUpsertOne is the builder for "upsert"-ing
	//  one Chunk node.
	ChunkUpsertOne struct {
		create *ChunkCreate
	}

	// ChunkUpsert is the "OnConflict" setter.
	ChunkUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ChunkUpsert) SetUpdatedAt(v time.Time) *ChunkUpsert {
	u.Set(chunk.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ChunkUpsert) UpdateUpdatedAt() *ChunkUpsert {
	u.SetExcluded(chunk.FieldUpdatedAt)
	return u
}

// SetStart sets the "start" field.
func (u *ChunkUpsert) SetStart(v time.Time) *ChunkUpsert {
	u.Set(chunk.FieldStart, v)
	return u
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *ChunkUpsert) UpdateStart() *ChunkUpsert {
	u.SetExcluded(chunk.FieldStart)
	return u
}

// SetLeaseExpiresAt sets the "lease_expires_at" field.
func (u *ChunkUpsert) SetLeaseExpiresAt(v time.Time) *ChunkUpsert {
	u.Set(chunk.FieldLeaseExpiresAt, v)
	return u
}

// UpdateLeaseExpiresAt sets the "lease_expires_at" field to the value that was provided on create.
func (u *ChunkUpsert) UpdateLeaseExpiresAt() *ChunkUpsert {
	u.SetExcluded(chunk.FieldLeaseExpiresAt)
	return u
}

// ClearLeaseExpiresAt clears the value of the "lease_expires_at" field.
func (u *ChunkUpsert) ClearLeaseExpiresAt() *ChunkUpsert {
	u.SetNull(chunk.FieldLeaseExpiresAt)
	return u
}

// SetState sets the "state" field.
func (u *ChunkUpsert) SetState(v chunk.State) *ChunkUpsert {
	u.Set(chunk.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *ChunkUpsert) UpdateState() *ChunkUpsert {
	u.SetExcluded(chunk.FieldState)
	return u
}

// SetSizeInput sets the "size_input" field.
func (u *ChunkUpsert) SetSizeInput(v int64) *ChunkUpsert {
	u.Set(chunk.FieldSizeInput, v)
	return u
}

// UpdateSizeInput sets the "size_input" field to the value that was provided on create.
func (u *ChunkUpsert) UpdateSizeInput() *ChunkUpsert {
	u.SetExcluded(chunk.FieldSizeInput)
	return u
}

// AddSizeInput adds v to the "size_input" field.
func (u *ChunkUpsert) AddSizeInput(v int64) *ChunkUpsert {
	u.Add(chunk.FieldSizeInput, v)
	return u
}

// ClearSizeInput clears the value of the "size_input" field.
func (u *ChunkUpsert) ClearSizeInput() *ChunkUpsert {
	u.SetNull(chunk.FieldSizeInput)
	return u
}

// SetSizeContent sets the "size_content" field.
func (u *ChunkUpsert) SetSizeContent(v int64) *ChunkUpsert {
	u.Set(chunk.FieldSizeContent, v)
	return u
}

// UpdateSizeContent sets the "size_content" field to the value that was provided on create.
func (u *ChunkUpsert) UpdateSizeContent() *ChunkUpsert {
	u.SetExcluded(chunk.FieldSizeContent)
	return u
}

// AddSizeContent adds v to the "size_content" field.
func (u *ChunkUpsert) AddSizeContent(v int64) *ChunkUpsert {
	u.Add(chunk.FieldSizeContent, v)
	return u
}

// ClearSizeContent clears the value of the "size_content" field.
func (u *ChunkUpsert) ClearSizeContent() *ChunkUpsert {
	u.SetNull(chunk.FieldSizeContent)
	return u
}

// SetSizeOutput sets the "size_output" field.
func (u *ChunkUpsert) SetSizeOutput(v int64) *ChunkUpsert {
	u.Set(chunk.FieldSizeOutput, v)
	return u
}

// UpdateSizeOutput sets the "size_output" field to the value that was provided on create.
func (u *ChunkUpsert) UpdateSizeOutput() *ChunkUpsert {
	u.SetExcluded(chunk.FieldSizeOutput)
	return u
}

// AddSizeOutput adds v to the "size_output" field.
func (u *ChunkUpsert) AddSizeOutput(v int64) *ChunkUpsert {
	u.Add(chunk.FieldSizeOutput, v)
	return u
}

// ClearSizeOutput clears the value of the "size_output" field.
func (u *ChunkUpsert) ClearSizeOutput() *ChunkUpsert {
	u.SetNull(chunk.FieldSizeOutput)
	return u
}

// SetSha256Input sets the "sha256_input" field.
func (u *ChunkUpsert) SetSha256Input(v string) *ChunkUpsert {
	u.Set(chunk.FieldSha256Input, v)
	return u
}

// UpdateSha256Input sets the "sha256_input" field to the value that was provided on create.
func (u *ChunkUpsert) UpdateSha256Input() *ChunkUpsert {
	u.SetExcluded(chunk.FieldSha256Input)
	return u
}

// ClearSha256Input clears the value of the "sha256_input" field.
func (u *ChunkUpsert) ClearSha256Input() *ChunkUpsert {
	u.SetNull(chunk.FieldSha256Input)
	return u
}

// SetSha256Content sets the "sha256_content" field.
func (u *ChunkUpsert) SetSha256Content(v string) *ChunkUpsert {
	u.Set(chunk.FieldSha256Content, v)
	return u
}

// UpdateSha256Content sets the "sha256_content" field to the value that was provided on create.
func (u *ChunkUpsert) UpdateSha256Content() *ChunkUpsert {
	u.SetExcluded(chunk.FieldSha256Content)
	return u
}

// ClearSha256Content clears the value of the "sha256_content" field.
func (u *ChunkUpsert) ClearSha256Content() *ChunkUpsert {
	u.SetNull(chunk.FieldSha256Content)
	return u
}

// SetSha256Output sets the "sha256_output" field.
func (u *ChunkUpsert) SetSha256Output(v string) *ChunkUpsert {
	u.Set(chunk.FieldSha256Output, v)
	return u
}

// UpdateSha256Output sets the "sha256_output" field to the value that was provided on create.
func (u *ChunkUpsert) UpdateSha256Output() *ChunkUpsert {
	u.SetExcluded(chunk.FieldSha256Output)
	return u
}

// ClearSha256Output clears the value of the "sha256_output" field.
func (u *ChunkUpsert) ClearSha256Output() *ChunkUpsert {
	u.SetNull(chunk.FieldSha256Output)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Chunk.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(chunk.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ChunkUpsertOne) UpdateNewValues() *ChunkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(chunk.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(chunk.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Chunk.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ChunkUpsertOne) Ignore() *ChunkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChunkUpsertOne) DoNothing() *ChunkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChunkCreate.OnConflict
// documentation for more info.
func (u *ChunkUpsertOne) Update(set func(*ChunkUpsert)) *ChunkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChunkUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ChunkUpsertOne) SetUpdatedAt(v time.Time) *ChunkUpsertOne {
	return u.Update(func(s *ChunkUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ChunkUpsertOne) UpdateUpdatedAt() *ChunkUpsertOne {
	return u.Update(func(s *ChunkUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetStart sets the "start" field.
func (u *ChunkUpsertOne) SetStart(v time.Time) *ChunkUpsertOne {
	return u.Update(func(s *ChunkUpsert) {
		s.SetStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *ChunkUpsertOne) UpdateStart() *ChunkUpsertOne {
	return u.Update(func(s *ChunkUpsert) {
		s.UpdateStart()
	})
}

// SetLeaseExpiresAt sets the "lease_expires_at" field.
func (u *ChunkUpsertOne) SetLeaseExpiresAt(v time.Time) *ChunkUpsertOne {
	return u.Update(func(s *ChunkUpsert) {
		s.SetLeaseExpiresAt(v)
	})
}

// UpdateLeaseExpiresAt sets the "lease_expires_at" field to the value that was provided on create.
func (u *ChunkUpsertOne) UpdateLeaseExpiresAt() *ChunkUpsertOne {
	return u.Update(func(s *ChunkUpsert) {
		s.UpdateLeaseExpiresAt()
	})
}

// ClearLeaseExpiresAt clears the value of the "lease_expires_at" field.
func (u *ChunkUpsertOne) ClearLeaseExpiresAt() *ChunkUpsertOne {
	return u.Update(func(s *ChunkUpsert) {
		s.ClearLeaseExpiresAt()
	})
}

// SetState sets the "state" field.
func (u *ChunkUpsertOne) SetState(v chunk.State) *ChunkUpsertOne {
	return u.Update(func(s *ChunkUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *ChunkUpsertOne) UpdateState() *ChunkUpsertOne {
	return u.Update(func(s *ChunkUpsert) {
		s.UpdateState()
	})
}

// SetSizeInput sets the "size_input" field.
func (u *ChunkUpsertOne) SetSizeInput(v int64) *ChunkUpsertOne {
	return u.Update(func(s *ChunkUpsert) {
		s.SetSizeInput(v)
	})
}

// AddSizeInput adds v to the "size_input" field.
func (u *ChunkUpsertOne) AddSizeInput(v int64) *ChunkUpsertOne {
	return u.Update(func(s *ChunkUpsert) {
		s.AddSizeInput(v)
	})
}

// UpdateSizeInput sets the "size_input" field to the value that was provided on create.
func (u *ChunkUpsertOne) UpdateSizeInput() *ChunkUpsertOne {
	return u.Update(func(s *ChunkUpsert) {
		s.UpdateSizeInput()
	})
}

// ClearSizeInput clears the value of the "size_input" field.
func (u *ChunkUpsertOne) ClearSizeInput() *ChunkUpsertOne {
	return u.Update(func(s *ChunkUpsert) {
		s.ClearSizeInput()
	})
}

// SetSizeContent sets the "size_content" field.
func (u *ChunkUpsertOne) SetSizeContent(v int64) *ChunkUpsertOne {
	return u.Update(func(s *ChunkUpsert) {
		s.SetSizeContent(v)
	})
}

// AddSizeContent adds v to the "size_content" field.
func (u *ChunkUpsertOne) AddSizeContent(v int64) *ChunkUpsertOne {
	return u.Update(func(s *ChunkUpsert) {
		s.AddSizeContent(v)
	})
}

// UpdateSizeContent sets the "size_content" field to the value that was provided on create.
func (u *ChunkUpsertOne) UpdateSizeContent() *ChunkUpsertOne {
	return u.Update(func(s *ChunkUpsert) {
		s.UpdateSizeContent()
	})
}

// ClearSizeContent clears the value of the "size_content" field.
func (u *ChunkUpsertOne) ClearSizeContent() *ChunkUpsertOne {
	return u.Update(func(s *ChunkUpsert) {
		s.ClearSizeContent()
	})
}

// SetSizeOutput sets the "size_output" field.
func (u *ChunkUpsertOne) SetSizeOutput(v int64) *ChunkUpsertOne {
	return u.Update(func(s *ChunkUpsert) {
		s.SetSizeOutput(v)
	})
}

// AddSizeOutput adds v to the "size_output" field.
func (u *ChunkUpsertOne) AddSizeOutput(v int64) *ChunkUpsertOne {
	return u.Update(func(s *ChunkUpsert) {
		s.AddSizeOutput(v)
	})
}

// UpdateSizeOutput sets the "size_output" field to the value that was provided on create.
func (u *ChunkUpsertOne) UpdateSizeOutput() *ChunkUpsertOne {
	return u.Update(func(s *ChunkUpsert) {
		s.UpdateSizeOutput()
	})
}

// ClearSizeOutput clears the value of the "size_output" field.
func (u *ChunkUpsertOne) ClearSizeOutput() *ChunkUpsertOne {
	return u.Update(func(s *ChunkUpsert) {
		s.ClearSizeOutput()
	})
}

// SetSha256Input sets the "sha256_input" field.
func (u *ChunkUpsertOne) SetSha256Input(v string) *ChunkUpsertOne {
	return u.Update(func(s *ChunkUpsert) {
		s.SetSha256Input(v)
	})
}

// UpdateSha256Input sets the "sha256_input" field to the value that was provided on create.
func (u *ChunkUpsertOne) UpdateSha256Input() *ChunkUpsertOne {
	return u.Update(func(s *ChunkUpsert) {
		s.UpdateSha256Input()
	})
}

// ClearSha256Input clears the value of the "sha256_input" field.
func (u *ChunkUpsertOne) ClearSha256Input() *ChunkUpsertOne {
	return u.Update(func(s *ChunkUpsert) {
		s.ClearSha256Input()
	})
}

// SetSha256Content sets the "sha256_content" field.
func (u *ChunkUpsertOne) SetSha256Content(v string) *ChunkUpsertOne {
	return u.Update(func(s *ChunkUpsert) {
		s.SetSha256Content(v)
	})
}

// UpdateSha256Content sets the "sha256_content" field to the value that was provided on create.
func (u *ChunkUpsertOne) UpdateSha256Content() *ChunkUpsertOne {
	return u.Update(func(s *ChunkUpsert) {
		s.UpdateSha256Content()
	})
}

// ClearSha256Content clears the value of the "sha256_content" field.
func (u *ChunkUpsertOne) ClearSha256Content() *ChunkUpsertOne {
	return u.Update(func(s *ChunkUpsert) {
		s.ClearSha256Content()
	})
}

// SetSha256Output sets the "sha256_output" field.
func (u *ChunkUpsertOne) SetSha256Output(v string) *ChunkUpsertOne {
	return u.Update(func(s *ChunkUpsert) {
		s.SetSha256Output(v)
	})
}

// UpdateSha256Output sets the "sha256_output" field to the value that was provided on create.
func (u *ChunkUpsertOne) UpdateSha256Output() *ChunkUpsertOne {
	return u.Update(func(s *ChunkUpsert) {
		s.UpdateSha256Output()
	})
}

// ClearSha256Output clears the value of the "sha256_output" field.
func (u *ChunkUpsertOne) ClearSha256Output() *ChunkUpsertOne {
	return u.Update(func(s *ChunkUpsert) {
		s.ClearSha256Output()
	})
}

// Exec executes the query.
func (u *ChunkUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ChunkCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChunkUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ChunkUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ChunkUpsertOne.ID is not supported by MySQL driver. Use ChunkUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ChunkUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ChunkCreateBulk is the builder for creating many Chunk entities in bulk.
type ChunkCreateBulk struct {
	config
	builders []*ChunkCreate
	conflict []sql.ConflictOption
}

// Save creates the Chunk entities in the database.
func (ccb *ChunkCreateBulk) Save(ctx context.Context) ([]*Chunk, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Chunk, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChunkMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ChunkCreateBulk) SaveX(ctx context.Context) []*Chunk {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ChunkCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ChunkCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Chunk.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChunkUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ccb *ChunkCreateBulk) OnConflict(opts ...sql.ConflictOption) *ChunkUpsertBulk {
	ccb.conflict = opts
	return &ChunkUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Chunk.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *ChunkCreateBulk) OnConflictColumns(columns ...string) *ChunkUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &ChunkUpsertBulk{
		create: ccb,
	}
}

// ChunkUpsertBulk is the builder for "upsert"-ing
// a bulk of Chunk nodes.
type ChunkUpsertBulk struct {
	create *ChunkCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Chunk.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(chunk.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ChunkUpsertBulk) UpdateNewValues() *ChunkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(chunk.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(chunk.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Chunk.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ChunkUpsertBulk) Ignore() *ChunkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChunkUpsertBulk) DoNothing() *ChunkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChunkCreateBulk.OnConflict
// documentation for more info.
func (u *ChunkUpsertBulk) Update(set func(*ChunkUpsert)) *ChunkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChunkUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ChunkUpsertBulk) SetUpdatedAt(v time.Time) *ChunkUpsertBulk {
	return u.Update(func(s *ChunkUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ChunkUpsertBulk) UpdateUpdatedAt() *ChunkUpsertBulk {
	return u.Update(func(s *ChunkUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetStart sets the "start" field.
func (u *ChunkUpsertBulk) SetStart(v time.Time) *ChunkUpsertBulk {
	return u.Update(func(s *ChunkUpsert) {
		s.SetStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *ChunkUpsertBulk) UpdateStart() *ChunkUpsertBulk {
	return u.Update(func(s *ChunkUpsert) {
		s.UpdateStart()
	})
}

// SetLeaseExpiresAt sets the "lease_expires_at" field.
func (u *ChunkUpsertBulk) SetLeaseExpiresAt(v time.Time) *ChunkUpsertBulk {
	return u.Update(func(s *ChunkUpsert) {
		s.SetLeaseExpiresAt(v)
	})
}

// UpdateLeaseExpiresAt sets the "lease_expires_at" field to the value that was provided on create.
func (u *ChunkUpsertBulk) UpdateLeaseExpiresAt() *ChunkUpsertBulk {
	return u.Update(func(s *ChunkUpsert) {
		s.UpdateLeaseExpiresAt()
	})
}

// ClearLeaseExpiresAt clears the value of the "lease_expires_at" field.
func (u *ChunkUpsertBulk) ClearLeaseExpiresAt() *ChunkUpsertBulk {
	return u.Update(func(s *ChunkUpsert) {
		s.ClearLeaseExpiresAt()
	})
}

// SetState sets the "state" field.
func (u *ChunkUpsertBulk) SetState(v chunk.State) *ChunkUpsertBulk {
	return u.Update(func(s *ChunkUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *ChunkUpsertBulk) UpdateState() *ChunkUpsertBulk {
	return u.Update(func(s *ChunkUpsert) {
		s.UpdateState()
	})
}

// SetSizeInput sets the "size_input" field.
func (u *ChunkUpsertBulk) SetSizeInput(v int64) *ChunkUpsertBulk {
	return u.Update(func(s *ChunkUpsert) {
		s.SetSizeInput(v)
	})
}

// AddSizeInput adds v to the "size_input" field.
func (u *ChunkUpsertBulk) AddSizeInput(v int64) *ChunkUpsertBulk {
	return u.Update(func(s *ChunkUpsert) {
		s.AddSizeInput(v)
	})
}

// UpdateSizeInput sets the "size_input" field to the value that was provided on create.
func (u *ChunkUpsertBulk) UpdateSizeInput() *ChunkUpsertBulk {
	return u.Update(func(s *ChunkUpsert) {
		s.UpdateSizeInput()
	})
}

// ClearSizeInput clears the value of the "size_input" field.
func (u *ChunkUpsertBulk) ClearSizeInput() *ChunkUpsertBulk {
	return u.Update(func(s *ChunkUpsert) {
		s.ClearSizeInput()
	})
}

// SetSizeContent sets the "size_content" field.
func (u *ChunkUpsertBulk) SetSizeContent(v int64) *ChunkUpsertBulk {
	return u.Update(func(s *ChunkUpsert) {
		s.SetSizeContent(v)
	})
}

// AddSizeContent adds v to the "size_content" field.
func (u *ChunkUpsertBulk) AddSizeContent(v int64) *ChunkUpsertBulk {
	return u.Update(func(s *ChunkUpsert) {
		s.AddSizeContent(v)
	})
}

// UpdateSizeContent sets the "size_content" field to the value that was provided on create.
func (u *ChunkUpsertBulk) UpdateSizeContent() *ChunkUpsertBulk {
	return u.Update(func(s *ChunkUpsert) {
		s.UpdateSizeContent()
	})
}

// ClearSizeContent clears the value of the "size_content" field.
func (u *ChunkUpsertBulk) ClearSizeContent() *ChunkUpsertBulk {
	return u.Update(func(s *ChunkUpsert) {
		s.ClearSizeContent()
	})
}

// SetSizeOutput sets the "size_output" field.
func (u *ChunkUpsertBulk) SetSizeOutput(v int64) *ChunkUpsertBulk {
	return u.Update(func(s *ChunkUpsert) {
		s.SetSizeOutput(v)
	})
}

// AddSizeOutput adds v to the "size_output" field.
func (u *ChunkUpsertBulk) AddSizeOutput(v int64) *ChunkUpsertBulk {
	return u.Update(func(s *ChunkUpsert) {
		s.AddSizeOutput(v)
	})
}

// UpdateSizeOutput sets the "size_output" field to the value that was provided on create.
func (u *ChunkUpsertBulk) UpdateSizeOutput() *ChunkUpsertBulk {
	return u.Update(func(s *ChunkUpsert) {
		s.UpdateSizeOutput()
	})
}

// ClearSizeOutput clears the value of the "size_output" field.
func (u *ChunkUpsertBulk) ClearSizeOutput() *ChunkUpsertBulk {
	return u.Update(func(s *ChunkUpsert) {
		s.ClearSizeOutput()
	})
}

// SetSha256Input sets the "sha256_input" field.
func (u *ChunkUpsertBulk) SetSha256Input(v string) *ChunkUpsertBulk {
	return u.Update(func(s *ChunkUpsert) {
		s.SetSha256Input(v)
	})
}

// UpdateSha256Input sets the "sha256_input" field to the value that was provided on create.
func (u *ChunkUpsertBulk) UpdateSha256Input() *ChunkUpsertBulk {
	return u.Update(func(s *ChunkUpsert) {
		s.UpdateSha256Input()
	})
}

// ClearSha256Input clears the value of the "sha256_input" field.
func (u *ChunkUpsertBulk) ClearSha256Input() *ChunkUpsertBulk {
	return u.Update(func(s *ChunkUpsert) {
		s.ClearSha256Input()
	})
}

// SetSha256Content sets the "sha256_content" field.
func (u *ChunkUpsertBulk) SetSha256Content(v string) *ChunkUpsertBulk {
	return u.Update(func(s *ChunkUpsert) {
		s.SetSha256Content(v)
	})
}

// UpdateSha256Content sets the "sha256_content" field to the value that was provided on create.
func (u *ChunkUpsertBulk) UpdateSha256Content() *ChunkUpsertBulk {
	return u.Update(func(s *ChunkUpsert) {
		s.UpdateSha256Content()
	})
}

// ClearSha256Content clears the value of the "sha256_content" field.
func (u *ChunkUpsertBulk) ClearSha256Content() *ChunkUpsertBulk {
	return u.Update(func(s *ChunkUpsert) {
		s.ClearSha256Content()
	})
}

// SetSha256Output sets the "sha256_output" field.
func (u *ChunkUpsertBulk) SetSha256Output(v string) *ChunkUpsertBulk {
	return u.Update(func(s *ChunkUpsert) {
		s.SetSha256Output(v)
	})
}

// UpdateSha256Output sets the "sha256_output" field to the value that was provided on create.
func (u *ChunkUpsertBulk) UpdateSha256Output() *ChunkUpsertBulk {
	return u.Update(func(s *ChunkUpsert) {
		s.UpdateSha256Output()
	})
}

// ClearSha256Output clears the value of the "sha256_output" field.
func (u *ChunkUpsertBulk) ClearSha256Output() *ChunkUpsertBulk {
	return u.Update(func(s *ChunkUpsert) {
		s.ClearSha256Output()
	})
}

// Exec executes the query.
func (u *ChunkUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ChunkCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ChunkCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChunkUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
